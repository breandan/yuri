import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm") version "1.2.51"
}

group = "co.ndan"
version = "0.1-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencies {
    compile(kotlin("stdlib-jdk8"))
    //TODO: Add project proper source code generation
//    compile("com.squareup:kotlinpoet:1.0.0-RC1")
}


val header: String =
    "// This file was generated by Yuri, a type-safe URI builder for Kotlin.\n" +
        "package main.kotlin\n" +
    "\n" +
    "import main.kotlin.G.*\n" +
    "\n" +
    "abstract class GFile<T>\n" +
    "\n" +
    "open class G private constructor() {\n" +
    "  open class project_ {\n"

val genSources by tasks.creating(Copy::class) {
    val walker = File(".").walkTopDown()
    val allFiles = walker
        .filter { !it.path.contains(".git") }
        .filter { !it.path.toCharArray().any { it.isDigit() } }
    val topLevelFiles = walker.maxDepth(1)
        .filter { !it.path.contains(".git") }
    val topLevelFileNames = topLevelFiles
        .map { it.name.replace(".", "_dot_") }
    val allFileNames = allFiles
        .map { it.name.replace(".", "_dot_")
            .replace("-", "_dash_")}
        .toSet()

    val secondLevelFiles = allFiles.filter { it !in topLevelFiles }


    var generatedFile = header
    topLevelFileNames.forEach {
        generatedFile += "\n@JvmName(\"$it\") operator fun div(a: $it.Companion) = $it<project_>()\n"
    }

    generatedFile += "\n" +
        "    companion object: project_()\n" +
        "  }\n" +
        "\n"

    allFileNames.forEach {
        generatedFile += "\nopen class $it<T>: GFile<T>() { companion object }\n"
    }

    generatedFile += "\n" +
        "  companion object {\n" +
        "    fun uri(path: Any) = println(path)\n" +
        "  }\n" +
        "}\n"

    val secondLevelFileNames = secondLevelFiles
        .map { val elements = it.path
            .replace("-", "_dash_")
            .replace("./", "")
            .replace(".", "_dot_")
            .split("/")
            .asReversed()

            val value = elements.joinToString("<") + "<project_>" + ">".repeat(elements.size -1)
            val key = elements.drop(1).joinToString("<") + "<project_>" + ">".repeat(elements.size -2)

            Pair(key, value)
        }

    secondLevelFileNames.forEach {
        generatedFile += "operator fun ${it.first}.div(a: ${it.second.substringBefore("<")}.Companion) = ${it.second}()\n"
    }

    File("src/main/kotlin/G.kt").apply{this.createNewFile()}.writeText(generatedFile)
}

tasks.withType<KotlinCompile> {
    dependsOn(genSources)
    kotlinOptions.jvmTarget = "1.8"
}